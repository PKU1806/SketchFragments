# 1 "./ecmp.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./ecmp.p4"

/* -*- P4_16 -*- */
# 1 "/usr/local/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout /// Parser execution time limit exceeded.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 4 "./ecmp.p4" 2
# 1 "/usr/local/share/p4c/p4include/v1model.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* P4-16 declaration of the P4 v1.0 switch model */




# 1 "/usr/local/share/p4c/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 23 "/usr/local/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,
    // Used for implementing dynamic_action_selection
    selector
}

// Are these correct?
@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    // The drop and recirculate_port fields are not used at all by the
    // behavioral-model simple_switch software switch as of September
    // 2018, and perhaps never was.  They may be considered
    // deprecated, at least for that P4 target device.  simple_switch
    // uses the value of the egress_spec field to determine whether a
    // packet is dropped or not, and it is recommended to use the
    // P4_14 drop() primitive action, or the P4_16 + v1model
    // mark_to_drop() primitive action, to cause that field to be
    // changed so the packet will be dropped.
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
    //
    // @alias is used to generate the field_alias section of the BMV2 JSON.
    // Field alias creates a mapping from the metadata name in P4 program to
    // the behavioral model's internal metadata name. Here we use it to
    // expose all metadata supported by simple switch to the user through
    // standard_metadata_t.
    //
    // flattening fields that exist in bmv2-ss
    // queueing metadata
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;
    @alias("queueing_metadata.qid") bit<5> qid;
    @alias("intrinsic_metadata.priority") bit<3> priority;
    // intrinsic metadata
    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp") bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<32> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;
    /// Indicates that a verify_checksum() method has failed.
    // 1 if a checksum error was found, otherwise 0.
    bit<1> checksum_error;
    @alias("intrinsic_metadata.recirculate_flag") bit<32> recirculate_flag;
    /// Error produced by parsing
    error parser_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}

// used as table implementation attribute
extern action_profile {
    action_profile(bit<32> size);
}

// Get a random number in the range lo..hi
extern void random<T>(out T result, in T lo, in T hi);
// If the type T is a named struct, the name is used
// to generate the control-plane API.
extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}

/**
Verifies the checksum of the supplied data.
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

/**
Verifies the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);

// The name 'standard_metadata' is reserved

// Architecture.
// M should be a struct of structs
// H should be a struct of headers, stacks or header_unions

parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
VerifyChecksum control are: block statements, calls to the
verify_checksum and verify_checksum_with_payload methods,
and return statements. */
control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
ComputeChecksum control are: block statements, calls to the
update_checksum and update_checksum_with_payload methods,
and return statements. */
control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 5 "./ecmp.p4" 2

//My includes
# 1 "././headers.p4" 1
/*************************************************************************

*********************** H E A D E R S  ***********************************

*************************************************************************/
# 5 "././headers.p4"
const bit<16> TYPE_IPV4 = 0x0800;
const bit<8> TYPE_TCP = 6;
const bit<8> TYPE_UDP = 17;
const bit<8> TYPE_ICMP = 1;

typedef bit<9> egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4> version;
    bit<4> ihl;
    bit<6> dscp;
    bit<2> ecn;
    bit<16> totalLen;
    bit<16> identification;
    bit<3> flags;
    bit<13> fragOffset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

header tcp_t{
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4> dataOffset;
    bit<1> MIH_fg;
    bit<1> SFH_fg;
    bit<1> SFH_sketch_number;
    bit<1> res;
    bit<1> cwr;
    bit<1> ece;
    bit<1> urg;
    bit<1> ack;
    bit<1> psh;
    bit<1> rst;
    bit<1> syn;
    bit<1> fin;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

header udp_t {
 bit<16> srcPort;
 bit<16> dstPort;
 bit<16> length;
 bit<16> checksum;
}

// if using udp protocol ,we will use this one to judge whether exists MIH and SFH
header FLAG_t{
    bit<48> ingress_timestamp;
    bit<48> egress_timestamp;
}

//part one of the bringing data
header MIH_t{
    //max interval header
    bit<16> mih_switch_id;
    bit<32> mih_fgment_id;
    bit<16> mih_padding;
    bit<48> mih_timestamp;
}

//sketch fragment header
header SFH_t{
    bit<16> sfh_switch_id;
    bit<32> sfh_fgment_id;

    //sketch fragments: a bucket which contains 10 bins
    bit<32> sfh_delay0;
    bit<32> sfh_delay1;
 bit<32> sfh_delay2;
 bit<32> sfh_delay3;
 bit<32> sfh_delay4;
 bit<32> sfh_delay5;
 bit<32> sfh_delay6;
 bit<32> sfh_delay7;
 //bit<32> sfh_delay8;
 //bit<32> sfh_delay9;
}

header cpu_t{
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
    bit<8> protocol;
    bit<16> srcPort;
 bit<16> dstPort;
    bit<48> delay;
    bit<48> interval;
    bit<8> flags;
}

struct metadata {
 bit<16> ipv4_srcPort;
 bit<16> ipv4_dstPort;

    //for sketch register
    bit<32> array_index1;
    bit<32> array_index2;
    bit<32> array_index0;
    bit<32> array_index3;
    bit<32> array_index4;
    bit<32> array_index5;

    bit<32> array_value0;
    bit<32> array_value1;
    bit<32> array_value2;
    bit<32> array_value3;
    bit<32> array_value4;
    bit<32> array_value5;

    bit<32> SFH_index;
    bit<32> MIH_index;
    bit<32> SFH_random;

    //for timestamp register
    bit<32> timestamp_index0;
    bit<32> timestamp_index1;
    bit<32> timestamp_index2;

    bit<48> timestamp_value0;
    bit<48> timestamp_value1;
    bit<48> timestamp_value2;

    //for counter registers
    bit<32> counter_index0;
    bit<32> counter_index1;
    bit<32> counter_index2;
    bit<32> counter_index3;

    bit<1> counter_value0;
    bit<1> counter_value1;
    bit<1> counter_value2;

    bit<48> MIH_value0;
    bit<48> MIH_value1;
    bit<48> MIH_value2;

    //for max interval register

    bit<48> max_interval_value0;
    bit<48> max_interval_value1;
    bit<48> max_interval_value2;
 bit<16> switch_id;
    bit<48> switch_delay;
    bit<8> sketch_fg;
    bit<8> swap_control;

    bit<32> delay_lev;
    bit<48> previous_ingress_global_timestamp;
    bit<48> interval;

    bit<8> SFH_target_array; //the sketch selected
    bit<32> SFH_target_bucket;
    bit<8> MIH_target_array; //the sketch selected
    bit<32> MIH_target_bucket; //the bucket selected
    bit<32> random_number;
    bit<14> ecmp_hash;
    bit<14> ecmp_group_id;

    //tmp use
    bit<32> tmp00;
    bit<32> tmp01;
    bit<32> tmp02;
    bit<32> tmp03;
    bit<32> tmp04;
    bit<32> tmp05;
    bit<32> tmp06;
    bit<32> tmp07;
    bit<32> tmp08;
    bit<32> tmp09;

    bit<32> tmp10;
    bit<32> tmp11;
    bit<32> tmp12;
    bit<32> tmp13;
    bit<32> tmp14;
    bit<32> tmp15;
    bit<32> tmp16;
    bit<32> tmp17;
    bit<32> tmp18;
    bit<32> tmp19;

    bit<32> tmp20;
    bit<32> tmp21;
    bit<32> tmp22;
    bit<32> tmp23;
    bit<32> tmp24;
    bit<32> tmp25;
    bit<32> tmp26;
    bit<32> tmp27;
    bit<32> tmp28;
    bit<32> tmp29;
}

struct headers {
    ethernet_t ethernet;
    // cpu_t        CPU;
    ipv4_t ipv4;
    tcp_t tcp;
 udp_t udp;
    FLAG_t flag;

    // MIH_t        MIH;
    // SFH_t	     SFH;
}
# 8 "./ecmp.p4" 2
# 1 "././parsers.p4" 1
/*************************************************************************

*********************** P A R S E R  *******************************

*************************************************************************/
# 5 "././parsers.p4"
parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType){
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
  transition select(hdr.ipv4.protocol) {
   TYPE_TCP : parse_tcp;
   TYPE_UDP : parse_udp;
          TYPE_ICMP: accept;
   default : accept;
  }
    }

    state parse_tcp {
        packet.extract(hdr.tcp);

  meta.ipv4_srcPort = hdr.tcp.srcPort;
  meta.ipv4_dstPort = hdr.tcp.dstPort;

        transition accept;
    }

    // state parse_SFH_of_TCP{
    //     transition select(hdr.tcp.SFH_fg){
    //         0 : accept;
    //         1 : parse_SFH;
    //         default : accept;
    //     }
    // }

    state parse_udp {
        packet.extract(hdr.udp);

  meta.ipv4_srcPort = hdr.udp.srcPort;
  meta.ipv4_dstPort = hdr.udp.dstPort;

        transition parse_flag;
    }

    //udp only
    state parse_flag{
        packet.extract(hdr.flag);
        transition accept;
    }

    // state parse_MIH{
    //     packet.extract(hdr.MIH);

    //     transition  accept;

    // }

 // state parse_SFH {
 // 	packet.extract(hdr.SFH);
 // 	transition accept;
 // }
}

/*************************************************************************

***********************  D E P A R S E R  *******************************

*************************************************************************/
# 81 "././parsers.p4"
control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        //parsed headers have to be added again into the packet.
        packet.emit(hdr.ethernet);
        // packet.emit(hdr.CPU);
        packet.emit(hdr.ipv4);
        packet.emit(hdr.tcp);
        packet.emit(hdr.udp);
        packet.emit(hdr.flag);
        // packet.emit(hdr.MIH);
        // packet.emit(hdr.SFH);
    }
}
# 9 "./ecmp.p4" 2




/*************************************************************************

************   C H E C K S U M    V E R I F I C A T I O N   *************

*************************************************************************/
# 17 "./ecmp.p4"
control MyVerifyChecksum(inout headers hdr, inout metadata meta)
{
 apply {}
}

/*************************************************************************

**************  I N G R E S S   P R O C E S S I N G   *******************

*************************************************************************/
# 26 "./ecmp.p4"
control MyIngress(inout headers hdr,
      inout metadata meta,
      inout standard_metadata_t standard_metadata)
{

 /******************* inherited code starts here       ************************/
 action drop(){
  mark_to_drop();
 }

 action ecmp_group(bit<14> ecmp_group_id, bit<16> num_nhops)
 {
  hash(meta.ecmp_hash,
   HashAlgorithm.crc16,
   (bit<1>)0,
   {hdr.ipv4.srcAddr,
   hdr.ipv4.dstAddr,
   meta.ipv4_srcPort,
   meta.ipv4_dstPort,
   hdr.ipv4.protocol
   },
   num_nhops);
  meta.ecmp_group_id = ecmp_group_id;
 }

 action set_nhop(macAddr_t dstAddr, egressSpec_t port)
 {
  //set the src mac address as the previous dst, this is not correct right?
  hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
  //set the destination mac address that we got from the match in the table
  hdr.ethernet.dstAddr = dstAddr;
  //set the output port that we also get from the table
  standard_metadata.egress_spec = port;
  //decrease ttl by 1
  hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
 }

 table ecmp_group_to_nhop
 {
  key = {
   meta.ecmp_group_id : exact;
   meta.ecmp_hash : exact;
  }
  actions = {
   drop;
   set_nhop;
  }
  size = 1024;
 }

 table ipv4_lpm
 {
  key = {
   hdr.ipv4.dstAddr : lpm;
  }
  actions = {
     set_nhop;
  ecmp_group;
  drop;
  }
  size = 1024;
  default_action = drop;
 }

 /******************* inherited code ends here       ************************/



 /******** log code starts here*******/


 /******** log code ends here*******/

 apply
 {
  if (hdr.ipv4.isValid()&&hdr.ipv4.ttl > 1) {

   switch (ipv4_lpm.apply().action_run){
    ecmp_group:{
     ecmp_group_to_nhop.apply();
    }
   }
  }
  else{
   drop();
  }

 }

}

/*************************************************************************

****************  E G R E S S   P R O C E S S I N G   *******************

*************************************************************************/
# 121 "./ecmp.p4"
control MyEgress(inout headers hdr,
     inout metadata meta,
     inout standard_metadata_t standard_metadata)
{


 apply
 {
  if(hdr.ipv4.isValid()&&hdr.udp.isValid()&&standard_metadata.instance_type ==0&&hdr.ipv4.ttl > 1){
   if(!hdr.flag.isValid()){
    hdr.flag.setValid();
   }
   hdr.flag.ingress_timestamp=standard_metadata.ingress_global_timestamp;
   hdr.flag.egress_timestamp=standard_metadata.egress_global_timestamp;


  }



 }
}

/*************************************************************************

*************   C H E C K S U M    C O M P U T A T I O N   **************

*************************************************************************/
# 148 "./ecmp.p4"
control MyComputeChecksum(inout headers hdr, inout metadata meta)
{
 apply
 {
  update_checksum(
   hdr.ipv4.isValid(),
   {hdr.ipv4.version,
    hdr.ipv4.ihl,
    hdr.ipv4.dscp,
    hdr.ipv4.ecn,
    hdr.ipv4.totalLen,
    hdr.ipv4.identification,
    hdr.ipv4.flags,
    hdr.ipv4.fragOffset,
    hdr.ipv4.ttl,
    hdr.ipv4.protocol,
    hdr.ipv4.srcAddr,
    hdr.ipv4.dstAddr},
   hdr.ipv4.hdrChecksum,
   HashAlgorithm.csum16);



  update_checksum_with_payload(
   hdr.flag.isValid(),
   {hdr.ipv4.srcAddr,
    hdr.ipv4.dstAddr,
    8w0,
    hdr.ipv4.protocol,
    hdr.udp.length,
    hdr.udp.srcPort,
    hdr.udp.dstPort,
    hdr.udp.length,
    hdr.flag},
   hdr.udp.checksum,
   HashAlgorithm.csum16);
 }
}

/*************************************************************************

***********************  S W I T C H  *******************************

*************************************************************************/
# 191 "./ecmp.p4"
//switch architecture
V1Switch(
 MyParser(),
 MyVerifyChecksum(),
 MyIngress(),
 MyEgress(),
 MyComputeChecksum(),
 MyDeparser()) main;
